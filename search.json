[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Curso de Introdu√ß√£o ao R",
    "section": "",
    "text": "Curso de Introdu√ß√£o ao R\n\n\n\n\n\n\nAviso\n\n\n\nO curso ainda est√° em constru√ß√£o ent√£o certos comandos podem n√£o funcionar como esperado!\n\n\nNeste reposit√≥rio est√° o material para o curso Introdu√ß√£o ao R, organizado pelo Prof.¬†Rodrigo Dalmolin, do Centro Multiusu√°rio de Bioinform√°tica da UFRN.\nO curso √© dividido em X m√≥dulos:",
    "crumbs": [
      "Curso de Introdu√ß√£o ao R"
    ]
  },
  {
    "objectID": "content/01_history.html",
    "href": "content/01_history.html",
    "title": "1¬† Hist√≥rico da linguagem",
    "section": "",
    "text": "1.1 Instala√ß√£o do R\nJohn Chambers iniciou a cria√ß√£o de um ambiente de an√°lises estat√≠sticas em 1976 no Bell Telephone Laboratories, tamb√©m conhecido como Bell Labs. Naquela √©poca a computa√ß√£o estat√≠stica costumava ser feita por meio de chamadas diretas √†s fun√ß√µes de bibliotecas Fortran, e tal ambiente foi projetado para oferecer uma abordagem alternativa, mais interativa, e com fun√ß√µes de documenta√ß√£o acess√≠vel. Este ambiente foi denominado de ‚ÄòS‚Äô e ap√≥s 1979 o nome passou a ser usado sem as aspas simples.\nEm 1988 foi lan√ßada a vers√£o S3, muitas mudan√ßas foram feitas na sintaxe da linguagem, estendendo o conceito de objetos, e novas funcionalidades possibilitavam a passagem de fun√ß√µes para outras fun√ß√µes, como o uso do apply. Foi publicado o livro The New S Language para introduzir as novas funcionalidades e ajudar os usu√°rios a entender como os c√≥digos deveriam ser escritos.\nA linguagem R foi criada em 1991, como uma variante da linguagem S, por Ross Ihaka e Robert Gentleman no Departamento de Estat√≠stica da Universidade de Auckland, e foi anunciada para o p√∫blico em 1993. Neste mesmo ano, a Bell Labs concedeu uma licen√ßa exclusiva √† StatSci, que posteriormente virou a Insightful Corporation, para desenvolver e vender a linguagem S. A Insightful Corporation adicionou algumas funcionalidades √† linguagem, como a adi√ß√£o de uma interface gr√°fica, e vendia esta implementa√ß√£o como o produto S-PLUS.\nUma das limita√ß√µes da linguagem S era que ela s√≥ estava dispon√≠vel no pacote comercial S-PLUS, e em 1995, Martin M√§chler convenceu Ross e Robert a usarem a GNU General Public License, tornando o R um software livre. Em 1998 foi lan√ßada a √∫ltima vers√£o da linguagem S, conhecida como S4, que fornecia funcionalidades avan√ßadas de orienta√ß√£o a objetos. Em 2000 a vers√£o 1.0.0 da linguagem R foi lan√ßada publicamente. E em 2008 a TIBCO Software Incorporation adquiriu a Insightful Corporation por 25 milh√µes de d√≥lares.\nO interpretador da linguagem R pode ser instalado em Linux, Mac e Windows1, e encontra-se dispon√≠vel gratuitamente no Comprehensive R Archive Network (CRAN).",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Hist√≥rico da linguagem</span>"
    ]
  },
  {
    "objectID": "content/01_history.html#rstudio",
    "href": "content/01_history.html#rstudio",
    "title": "1¬† Hist√≥rico da linguagem",
    "section": "1.2 RStudio",
    "text": "1.2 RStudio\nO RStudio √© um ambiente de desenvolvimento integrado que inclui console, editor ciente de sintaxe e diversas outras ferramentas, que visam o aumento da produtividade do desenvolvedor. Possui edi√ß√µes gratuitas e comerciais, que podem ser obtidas em RStudio.com.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Hist√≥rico da linguagem</span>"
    ]
  },
  {
    "objectID": "content/01_history.html#footnotes",
    "href": "content/01_history.html#footnotes",
    "title": "1¬† Hist√≥rico da linguagem",
    "section": "",
    "text": "os passos necess√°rios para a instala√ß√£o podem ser diferentes de acordo com o sistema operacional utilizado‚Ü©Ô∏é",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Hist√≥rico da linguagem</span>"
    ]
  },
  {
    "objectID": "content/02_operation.html",
    "href": "content/02_operation.html",
    "title": "2¬† Funcionamento b√°sico",
    "section": "",
    "text": "2.1 Operadores\n2+5         #Adicao                     \n5-2         #Subtracao\n2*5         #Multiplicacao\n8/2         #Divisao\n2^5         #Exponenciacao\n5%%2        #Resto da divis√£o\n3==5          #Igual\n3!=5          #Diferente\n3&gt;5         #Maior que\n3&lt;5         #Menor que\n3&gt;=5          #Maior ou igual\n3&lt;=5          #Menor ou igual\n((2+5-3)*10)^4/7^4",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Funcionamento b√°sico</span>"
    ]
  },
  {
    "objectID": "content/02_operation.html#operadores",
    "href": "content/02_operation.html#operadores",
    "title": "2¬† Funcionamento b√°sico",
    "section": "",
    "text": "Aritmetica basica\n\n\n\nRelacionais\n\n\n\nOpera√ß√µes podem ser concatenadas:",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Funcionamento b√°sico</span>"
    ]
  },
  {
    "objectID": "content/02_operation.html#vari√°veis",
    "href": "content/02_operation.html#vari√°veis",
    "title": "2¬† Funcionamento b√°sico",
    "section": "2.2 Vari√°veis",
    "text": "2.2 Vari√°veis\nA seta ‚Äú&lt;-‚Äù representa o simbolo de atribui√ß√£o e ao escrever o nome do objeto, seu valor sera impresso. Veja o exemplo:\n\nx &lt;- 1\nx\n\nCaso algum valor seja atribu√≠do ao mesmo objeto, ele ser√° sobrescrito:\n\nx &lt;- \"gol do gremio!\"\nx\n\nOs resultados de opera√ß√µes podem ser salvos em objetos:\n\nx&lt;-2+5\ny=5-2\n2*5-&gt;w\nz&lt;-8/2\n\nresultado &lt;- (((x-y)*w)^z)/(x^z)\nresultado",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Funcionamento b√°sico</span>"
    ]
  },
  {
    "objectID": "content/02_operation.html#fun√ß√µes",
    "href": "content/02_operation.html#fun√ß√µes",
    "title": "2¬† Funcionamento b√°sico",
    "section": "2.3 Fun√ß√µes",
    "text": "2.3 Fun√ß√µes\nChamando fun√ß√µes:\n\nsum(1,3,5)\na&lt;-rep(\"Aluno\",times=3)\na",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Funcionamento b√°sico</span>"
    ]
  },
  {
    "objectID": "content/02_operation.html#acessando-a-documenta√ß√£o",
    "href": "content/02_operation.html#acessando-a-documenta√ß√£o",
    "title": "2¬† Funcionamento b√°sico",
    "section": "2.4 Acessando a documenta√ß√£o",
    "text": "2.4 Acessando a documenta√ß√£o\nEstas fun√ß√µes buscam e exibem a documenta√ß√£o de fun√ß√µes:\n\nhelp(sum)\n?sd\n??plot",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Funcionamento b√°sico</span>"
    ]
  },
  {
    "objectID": "content/02_operation.html#diret√≥rio-de-trabalho",
    "href": "content/02_operation.html#diret√≥rio-de-trabalho",
    "title": "2¬† Funcionamento b√°sico",
    "section": "2.5 Diret√≥rio de trabalho",
    "text": "2.5 Diret√≥rio de trabalho\nEstas fun√ß√µes manipulam o diret√≥rio de trabalho:\n\n# verifica o caminho para o diret√≥rio de trabalho\ngetwd()\n# define o diret√≥rio de trabalho\nsetwd()\n# lista os arquivos presentes no diret√≥rio de trabalho\nlist.files()\n# carrega um arquivo bin√°rio do diret√≥rio de trabalho para o ambiente\nload()\n# salva o conte√∫do de uma vari√°vel no diret√≥rio de trabalho\nsave()",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Funcionamento b√°sico</span>"
    ]
  },
  {
    "objectID": "content/02_operation.html#desafio",
    "href": "content/02_operation.html#desafio",
    "title": "2¬† Funcionamento b√°sico",
    "section": "2.6 Desafio",
    "text": "2.6 Desafio\n\n\n\n\n\n\nPratique sem IA!\n\n\n\nOs desafios a seguir foram criados para ajud√°-lo a desenvolver suas habilidades de forma independente.\nEvite o uso de Intelig√™ncia Artificial e tente resolver os problemas por conta pr√≥pria.\nAprender com a pr√°tica fortalecer√° seu racioc√≠nio e aprofundar√° seu conhecimento! üöÄ\n\n\nJos√© e Paulo adoram jogar basquete nas suas horas livres. Eles mant√©m uma competi√ß√£o entre si e por isso decidiram registrar todos os pontos que eles marcam durante as partidas.\nAt√© agora foram 8 partidas:\n\nJos√© fez 8, 10, 12, 9, 15, 16, 11, 7 cestas.\nPaulo fez 5, 11, 13, 14, 23, 14, 9, 10 cestas.\n\n\nCrie dois objetos que contenham o n√∫mero de cestas que cada um fez:\nVerifique a classe de cada um dos objetos:\nCom a utiliza√ß√£o da ajuda do R, procure por uma fun√ß√£o que possibilite o c√°lculo de m√©dias. Com ela, calcule as m√©dias de cestas dos dois jogadores e atribua estes valores a objetos diferentes:\nCompare os valores das m√©dias calculadas usando os operadores l√≥gicos ‚Äú&gt;‚Äù e ‚Äú&lt;‚Äù. Quem teve um desempenho m√©dio melhor?",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Funcionamento b√°sico</span>"
    ]
  },
  {
    "objectID": "content/03_vectors.html",
    "href": "content/03_vectors.html",
    "title": "3¬† Vetores",
    "section": "",
    "text": "3.1 Hierarquia de classes\nFun√ß√£o de concatena√ß√£o c():\nA fun√ß√£o class() pode ser usada para acessar a classe de um determinado objeto:\nA fun√ß√£o vector() cria vetores com valores padr√µes de uma determinada classe:\nVetores comportam apenas uma classe de elementos. Quando um vetor √© criado com valores pertecentes a classes distintas, √© feita uma convers√£o impl√≠cita. Um valor logical √© convertido para numeric, e um valor numeric √© convertido para character:\nclass(c(1, 2, 3))\nclass(c(\"1\", \"2\", \"3\"))\nclass(c(TRUE, FALSE, FALSE))\nclass(c(\"TRUE\", \"FALSE\", \"FALSE\"))\nclass(c(1, \"a\", TRUE))\nclass(c(1, \"a\"))\nclass(c(1, T))\nclass(c(\"a\", T))\nCom esta hierarquia, √© poss√≠vel somar valores l√≥gicos, sendo TRUE equivalente a 11, e FALSE equivalente a 0:\nlogical&lt;- c(TRUE, FALSE, FALSE, TRUE, FALSE)\nsum(logico)\nUma convers√£o expl√≠cita pode ser feita com as fun√ß√µes as.&lt;nome da classe&gt;:\nx&lt;-0:10\nx\nclass(x)\na&lt;-as.numeric(x)\na\nclass(a)\nb&lt;-as.character(x)\nb\nclass(b)\nc&lt;-as.logical(x)\nc\nclass(c)",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Vetores</span>"
    ]
  },
  {
    "objectID": "content/03_vectors.html#hierarquia-de-classes",
    "href": "content/03_vectors.html#hierarquia-de-classes",
    "title": "3¬† Vetores",
    "section": "",
    "text": "Ex.4: Verifique se ‚Äúx‚Äù e ‚Äúa‚Äù s√£o iguais\n\n\n\n\n\n\nidentical(x, a)\n\n\n\n\n\n\n\n\n\n\nEx.5: Tente converter os vetores (a, b, c) em numeric\n\n\n\n\n\n\nas.numeric(a)\nas.numeric(b)\nas.numeric(c)\n\n\n\n\n\n\n\n\n\n\nEx.6: Crie um vetor de caracteres de ‚Äúa‚Äù at√© ‚Äúd‚Äù e o converta em num√©rico\n\n\n\n\n\n\nchar_vec &lt;- c(\"a\", \"b\", \"c\", \"d\")\nas.numeric(char_vec) # Retornar√° NA pois n√£o h√° convers√£o direta",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Vetores</span>"
    ]
  },
  {
    "objectID": "content/03_vectors.html#valores-n√£o-dispon√≠veis-ou-imposs√≠veis",
    "href": "content/03_vectors.html#valores-n√£o-dispon√≠veis-ou-imposs√≠veis",
    "title": "3¬† Vetores",
    "section": "3.2 Valores n√£o dispon√≠veis ou imposs√≠veis",
    "text": "3.2 Valores n√£o dispon√≠veis ou imposs√≠veis\nValores n√£o dispon√≠veis s√£o representados por NA (Not Available), e valores imposs√≠veis, como o resultado de uma divis√£o por 0, s√£o representados por NaN (Not a Number).\n\nx&lt;-c(1, 2, 3, NA)\ny&lt;-c(\"a\", \"b\", \"c\", NA)\nis.na(x)\nw&lt;-rep(NA, 10)\nw\nclass(w)\nz&lt;-rep(NA_integer_, 10)\nz\nclass(z)\na &lt;- c(1, 3, NA, 7, 9)\nsum(a)\nsum(a, na.rm=TRUE)",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Vetores</span>"
    ]
  },
  {
    "objectID": "content/03_vectors.html#atributos-de-objetos",
    "href": "content/03_vectors.html#atributos-de-objetos",
    "title": "3¬† Vetores",
    "section": "3.3 Atributos de objetos",
    "text": "3.3 Atributos de objetos\nTodos os objetos possuem atributos:\n\nx&lt;-1:5\nx\nlength(x)\ndim(x)\nattributes(x)\nnames(x)&lt;-c(\"a\", \"b\", \"c\", \"d\", \"e\")\nx\nattributes(x)",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Vetores</span>"
    ]
  },
  {
    "objectID": "content/03_vectors.html#fator",
    "href": "content/03_vectors.html#fator",
    "title": "3¬† Vetores",
    "section": "3.4 Fator",
    "text": "3.4 Fator\nUm vetor da classe factor √© um vetor categ√≥rico que possui o atributo levels:\n\nx&lt;-factor(c(\"s\", \"n\", \"n\", \"s\", \"s\"))\nz&lt;-factor(c(\"alto\", \"baixo\", \"medio\"))\nx\nz",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Vetores</span>"
    ]
  },
  {
    "objectID": "content/03_vectors.html#trabalhando-com-vetores",
    "href": "content/03_vectors.html#trabalhando-com-vetores",
    "title": "3¬† Vetores",
    "section": "3.5 Trabalhando com vetores",
    "text": "3.5 Trabalhando com vetores\nNo R as opera√ß√µes s√£o vetorizadas:\n\nx&lt;-1:5\nx\ny&lt;-6:10\ny\n\nSoma dos valores de ambos os vetores\n\nx+y\n\nPodemos multiplicar um vetor por um n√∫mero:\n\nx*2               \nx^2\nz&lt;-c(x,y)\nz\nz+x\nw&lt;-1:3\nw+x\nl&lt;-c(T, T, F, T, F, F)\nl/2\n\nUsamos [] para acessar elementos de vetores:\n\nletter&lt;-c(\"x\", \"y\", \"z\", \"w\", \"j\")\n# acessa o segundo elemento do vetor\nletter[2]               \n# podemos usar sequ√™ncias de valores\nletter[2:4]             \n# usamos a fun√ß√£o c() para valores n√£o cont√≠guos\nletter[c(1, 4)]         \n# usamos n√∫meros negativos para excluir um ou mais valores\nletter[-2]              \nletter[c(-2, -5)]\n# podemos criar √≠ndices num√©ricos\nidx&lt;-c(1, 4)            \nletter[idx]\nx&lt;-1:10\n# podemos usar operadores relacionais como filtros\nx[x&gt;7]                  \n# tamb√©m funciona com caracteres, levando em considera√ß√£o a ordem lexicogr√°fica\nletter[letter&gt;\"k\"]      \nletter[letter&lt;\"k\"]\nletter==\"z\"\n\n\n\n\n\n\n\nEx. 7: Crie um vetor de 1 at√© 10 e substitua o valor da oitava posi√ß√£o pelo valor da primeira posi√ß√£o.\n\n\n\n\n\n\nvec &lt;- 1:10\nvec[8] &lt;- vec[1]\nvec\n\n\n\n\nFun√ß√µes para identificar valores extremos:\n\n# definindo uma semente para a gera√ß√£o de valores aleat√≥rios\nset.seed(1)\ns&lt;-sample(-1000:1000, 200)\n# procura a posi√ß√£o do maior valor\nwhich.max(s)            \n# exibe o maior valor\nmax(s)\n# exibe o menor valor\nmin(s)\n# exibe o intervalo dos valores do vetor\nrange(s)\n# cria um vetor l√≥gico\ns&gt;0                     \n# cria um vetor com as posi√ß√µes que satisfazem o comando\nwhich(s&gt;0)              \n\n\n\n\n\n\n\nEx.8: Quantos valores de s s√£o maiores que 0?\n\n\n\n\n\n\nsum(s &gt; 0)\n\n\n\n\n\n\n\n\n\n\nEx.9: Fa√ßa um vetor contendo os valores de s maiores do que 0.\n\n\n\n\n\n\npositivos &lt;- s[s &gt; 0]\npositivos\n\n\n\n\nFun√ß√µes de ordenamento:\n\nx&lt;-c(3, 8, 2, 1, 5, 9, 7, 7, 3)\nx\n# ordena um vetor\nsort(x)        \nsort(x, decreasing = T)\n# informa a ordem na qual cada elemento deve ser acessado para exibir o conte√∫do do vetor em ordem crescente\norder(x)                \n# exibe o conte√∫do do vetor de forma aleat√≥ria, e uma √∫nica vez, cada posi√ß√£o\nsample(x)     \n# elimina as replicatas\nunique(x)\n# exibe um vetor l√≥gico referente √† posi√ß√£o das replicatas\nduplicated(x)\n\n\n\n\n\n\n\nEx.10: Quantos duplicados existem em x?\n\n\n\n\n\n\nsum(duplicated(x))",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Vetores</span>"
    ]
  },
  {
    "objectID": "content/03_vectors.html#strings",
    "href": "content/03_vectors.html#strings",
    "title": "3¬† Vetores",
    "section": "3.6 Strings",
    "text": "3.6 Strings\nConceitualmente, uma string √© um vetor de caracteres2. Certas opera√ß√µes s√£o recorrentes na manipula√ß√£o de strings, como a inser√ß√£o de conte√∫do numa dada posi√ß√£o, substitui√ß√£o do conte√∫do de uma por√ß√£o do vetor, ou a busca de um determinado padr√£o:\n\nx&lt;-20:30\ny&lt;-1:4\n# adiciona valores num vetor numa posi√ß√£o espec√≠fica\nappend(x, y, after = 3)\n# concatena dois vetores, converte em character\nx&lt;-paste(\"dt\", 1:10, sep = \"\")     \nx\n\nIdentificando express√µes regulares (regex) numa string:\n\nx &lt;- c(\"16_24cat\", \"25_34cat\", \"35_44catch\", \"45_54Cat\", \"55_104fat\")\n# identifica regex por posi√ß√£o\ngrep(\"cat\", x)               \n# o argumento value = T retorna os valores\ngrep(\"cat\", x, value = T)           \n# $ √© um metacaractere que identifica o t√©rmino da string\ngrep(\"cat$\", x, ignore.case = T)    \n# a fun√ß√£o grepl() retorna um vetor l√≥gico\ngrepl(\"cat$\", x, ignore.case = T)",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Vetores</span>"
    ]
  },
  {
    "objectID": "content/03_vectors.html#express√µes-regulares",
    "href": "content/03_vectors.html#express√µes-regulares",
    "title": "3¬† Vetores",
    "section": "3.7 Express√µes regulares",
    "text": "3.7 Express√µes regulares\n\n\n\nMetacaractere\nFuncionalidade\n\n\n\n\n*\n0 ou mais vezes\n\n\n+\numa ou mais vezes\n\n\n?\n0 ou 1 vez\n\n\n{n}\nexatamente n vezes\n\n\n{n,}\npelo menos n vezes\n\n\n{n,m}\nentre n e m vezes\n\n\n^\nin√≠cio da string\n\n\n$\nfinal da string\n\n\n\n\nstrings &lt;- c(\"a\", \"ab\", \"acb\", \"accb\", \"acccb\", \"accccb\")\ngrep(\"acb\", strings)\ngrep(\"ac*b\", strings)\ngrep(\"ac+b\", strings)\ngrep(\"ac?b\", strings)\ngrep(\"ac{2}b\", strings)\ngrep(\"ac{2,}b\", strings)\ngrep(\"ac{2,3}b\", strings)",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Vetores</span>"
    ]
  },
  {
    "objectID": "content/03_vectors.html#desafio",
    "href": "content/03_vectors.html#desafio",
    "title": "3¬† Vetores",
    "section": "3.8 Desafio",
    "text": "3.8 Desafio\n\n\n\n\n\n\nPratique sem IA!\n\n\n\nOs desafios a seguir foram criados para ajud√°-lo a desenvolver suas habilidades de forma independente.\nEvite o uso de Intelig√™ncia Artificial e tente resolver os problemas por conta pr√≥pria.\nAprender com a pr√°tica fortalecer√° seu racioc√≠nio e aprofundar√° seu conhecimento! üöÄ\n\n\n\nConsidere os seguintes elementos: 1, 4, 5, ‚Äúa‚Äù, 10L e TRUE\n\n\nCrie um vetor com os elementos acima.\nVerifique a classe do vetor criado. Se houve coer√ß√£o impl√≠cita, explique.\n\n\nConsidere as opera√ß√µes vetorizadas:\n\n\n# a)\nc(1, 3, 5) + c(2, 4, 6)\n\n# b)\nc(1, 3, 5) + c(2, 4, 6, 8)\n\nExplique o que ocorre em cada uma das opera√ß√µes acima.\n\nConsidere o seguinte vetor:\n\n\nx &lt;- c(-1, 45, -6, 88, 30, 4)\n\n\nObtenha um outro vetor a partir deste que contenha apenas os elementos da posi√ß√£o 2 e da √∫ltima posi√ß√£o.\nObtenha um outro vetor a partir de x que contenha todos os elementos, exceto o 3¬∫ elemento.\nAtribua um nome para cada um dos elementos do vetor x.\nObtenha a posi√ß√£o do valor m√°ximo contido no vetor x.\nObtenha um outro vetor a partir de x com todos os valores positivos.",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Vetores</span>"
    ]
  },
  {
    "objectID": "content/03_vectors.html#footnotes",
    "href": "content/03_vectors.html#footnotes",
    "title": "3¬† Vetores",
    "section": "",
    "text": "na convers√£o de valores num√©ricos para l√≥gicos, 0 √© convertido para FALSE e qualquer outro valor √© convertido em TRUE‚Ü©Ô∏é\nindependente da quantidade de caracteres o atributo length ser√° sempre igual a 1‚Ü©Ô∏é",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Vetores</span>"
    ]
  },
  {
    "objectID": "content/04_matrix_lists_arrays.html",
    "href": "content/04_matrix_lists_arrays.html",
    "title": "4¬† Matrizes",
    "section": "",
    "text": "4.1 Arrays\nMatrizes s√£o vetores bidimensionais que possuem o atributo dimens√£o. Por serem vetores, comportam apenas uma classe de elementos:\nUm array √© um vetor que possui mais de duas dimens√µes:\n# criando um vetor multidimensional com 4 matrizes de 5 linhas e 10 colunas\nar&lt;-array(1:200, c(5, 10, 4))\nar\n# acessando a primeira matriz [linha, coluna, matriz]\nar[,,1]",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Matrizes</span>"
    ]
  },
  {
    "objectID": "content/04_matrix_lists_arrays.html#listas",
    "href": "content/04_matrix_lists_arrays.html#listas",
    "title": "4¬† Matrizes",
    "section": "4.2 Listas",
    "text": "4.2 Listas\nListas s√£o tipos especiais de vetores que comportam elementos de diferentes classes:\n\na &lt;- c(1, 3, NA, 7, 9)\nb&lt;-matrix(1:200, 20,10)\nc&lt;-\"Gol do Gremio\"\nz&lt;-factor(c(\"alto\", \"baixo\", \"medio\"))\nls&lt;-list(a, b, c, z)\n# cada elemento da lista aparece com [[]]\nls                    \n# a fun√ß√£o vector() pode criar listas vazias\nls1&lt;-vector(\"list\", 5)   \nls1\n\n\n4.2.1 Trabalhando com listas\nListas podem ser acessadas com os operadores [], [[]] e $ (para listas nomeadas):\n\n# [] extrai uma lista\nls[1]        \n# [[]] extrai o objeto interno\nls[[1]]           \nclass(ls[1])\nclass(ls[[1]])\n# posi√ß√£o na lista e posi√ß√£o no elemento\nls[[c(1,2)]]      \nls[[2]][2,]\nnames(ls)&lt;-c(\"Arilson\", \"Roger\", \"Paulo Nunes\", \"Jardel\")\nls$Roger",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Matrizes</span>"
    ]
  },
  {
    "objectID": "content/04_matrix_lists_arrays.html#desafio",
    "href": "content/04_matrix_lists_arrays.html#desafio",
    "title": "4¬† Matrizes",
    "section": "4.3 Desafio",
    "text": "4.3 Desafio\n\n\n\n\n\n\nPratique sem IA!\n\n\n\nOs desafios a seguir foram criados para ajud√°-lo a desenvolver suas habilidades de forma independente.\nEvite o uso de Intelig√™ncia Artificial e tente resolver os problemas por conta pr√≥pria.\nAprender com a pr√°tica fortalecer√° seu racioc√≠nio e aprofundar√° seu conhecimento! üöÄ\n\n\n\nConsidere o seguinte vetor:\n\n\nx &lt;- 1:18\n\n\nCom este vetor, construa uma matriz de 6 linhas e 3 colunas de duas maneiras diferentes.\nAdicione o seguinte vetor como um coluna da matriz:\n\n\nv &lt;- letters[1:6]\n\n\nO que acontece quando juntamos este vetor √† matriz?\nAtribua nomes √†s colunas e √†s linhas:\n\n\nConsidere a seguinte matriz:\n\n\nset.seed(1)\nm &lt;- matrix(sample(1:100, 20), nrow = 4, ncol = 5)\n\n\nOrdene, de maneira crescente, as linhas da matriz de acordo com os valores da coluna 1.\nExclua as colunas 2 e 4 desta matriz.\nCrie um outro objeto para guardar o valor da soma das colunas desta matriz.\n\n\nConsidere o objeto ‚Äòx‚Äô:\n\n\nx &lt;- list(list(list()))\n\n# A fun√ß√£o 'str()' mostra a estrutura de um objeto.\nstr(x) \n\n# A fun√ß√£o 'is.recursive()' indica se um objeto √© recursivo\nis.recursive(x) \n\n\n# Agora conside a seguinte lista:\nls &lt;- list(list(1, 2), 1:10, letters[1:5])\n\n\nComo os objetos da classe das listas diferem dos vetores at√¥micos?\nUse a fun√ß√£o ‚Äòlength‚Äô na lista ‚Äòls‚Äô acima. O que ela retorna?\nQual a classe de cada elemento desta lista?\nAtribua nomes a cada um elementos desta lista.\nQual √© a diferen√ßa entre as sa√≠das dos dois comandos abaixo?\n\n\nls[2]\nls[[2]]\n\n\nObtenha os valores (acesse os elementos de duas formas diferentes):\n\n\n## 1) do 3¬∫ elemento da 2¬™ posi√ß√£o da lista:\n\n\n\n## 2) os elementos 1 ao 4 da terceira posi√ß√£o da lista.\n\n\nConsidere o vetor:\n\n\nb &lt;- 1:12\n\nCom este vetor, crie dois objetos do tipo ‚Äòarray‚Äô, usando duas abordagens diferentes.",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Matrizes</span>"
    ]
  },
  {
    "objectID": "content/05_dataframes.html",
    "href": "content/05_dataframes.html",
    "title": "5¬† Data.frames",
    "section": "",
    "text": "5.0.1 Trabalhando com data.frames\nUm data.frame √© um tipo especial de lista, onde todos os elementos devem possuir o mesmo length. Por ser uma lista, cada posi√ß√£o comporta elementos de diferentes classes. Do ponto de vista pr√°tico, o data.frame funciona como uma planilha bidimensional formado por vetores de mesmo tamanho, sendo cada vetor uma coluna:\nPara acessar data.frames podemos usar os operadores [], [[]] e $:\ndt&lt;-data.frame(number=c(1, 2, 3, 4, 5),\n               letter = c(\"x\", \"y\", \"z\", \"w\", \"j\"),\n               logical = c(TRUE, FALSE, FALSE, TRUE, FALSE))\n# [[ ]] acessa cada coluna por posi√ß√£o\ndt[[1]]              \n# [ ] acessa as coordenadas [linha, coluna]\ndt[,1]               \n# $ acessa a coluna pelo nome\ndt$number            \n# carrega o data.frame mtcars\ncars&lt;-mtcars        \n# mostra as 6 primeiras linhas\nhead(cars)          \n# mostra as 6 ultimas linhas\ntail(cars)\n# data.frames possuem colnames e rownames\ncolnames(dt)\nrow.names(dt)\n# podemos alterar colnames e rownames\nrow.names(dt)&lt;-c(\"a\", \"b\", \"c\", \"d\", \"e\")\n# alterando apenas a posi√ß√£o 2\ncolnames(dt)[2]&lt;-\"letras\"     \n# podemos alterar valores espec√≠ficos de um data.frame\ndt[3,1]&lt;-\"10\"\ndt$logical&lt;-as.numeric(dt$logical)\ndt$letras&lt;-NA\n√â poss√≠vel verificar as ocorrencias de um data.frame em outro:\nbiometria&lt;-data.frame(nomes=c(\"Carlos\", \"Roberto\", \"Olivio\", \"Joel\"),\n                      altura=c(180, 187, 155, 168),\n                      peso=c(80, 90, 98, 64))\nbiometria\nesportes&lt;-data.frame(nomes=c(\"Carlos\", \"Roberto\", \"Olivio\", \"Jomar\"),\n                     esportes=c(\"futebol\", \"remo\", \"sumo\", \"maratona\"))\nesportes\n# retorna um vetor l√≥gico\nbiometria$nomes %in% esportes$nomes\n# pode ser usado como √≠ndice\nidx&lt;-biometria$nomes %in% esportes$nomes    \nx&lt;-biometria[idx,]\nx\n# ordenando data.frames por uma coluna\nbiometria&lt;-biometria[with(biometria, order(altura)), ]\nbiometria\nUnindo data.frames com a fun√ß√£o merge():\nunido&lt;-merge(biometria, esportes, by=\"nomes\")\nunido\n# as informa√ß√µes n√£o dispon√≠veis s√£o preenchidas por NA\n# com todos os presentes no primeiro\nunido&lt;-merge(biometria, esportes, by=\"nomes\", all.x=T)\nunido\n# com todos os presentes no segundo\nunido&lt;-merge(biometria, esportes, by=\"nomes\", all.y=T)\nunido\n# com todos presentes\nunido&lt;-merge(biometria, esportes, by=\"nomes\", all=T)\nunido\n#load(\"Data/COGs.RData\")",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Data.frames</span>"
    ]
  },
  {
    "objectID": "content/05_dataframes.html#desafio",
    "href": "content/05_dataframes.html#desafio",
    "title": "5¬† Data.frames",
    "section": "5.1 Desafio",
    "text": "5.1 Desafio\n\n\n\n\n\n\nPratique sem IA!\n\n\n\nOs desafios a seguir foram criados para ajud√°-lo a desenvolver suas habilidades de forma independente.\nEvite o uso de Intelig√™ncia Artificial e tente resolver os problemas por conta pr√≥pria.\nAprender com a pr√°tica fortalecer√° seu racioc√≠nio e aprofundar√° seu conhecimento! üöÄ\n\n\n\nCrie os dataframes abaixo:\n\n\npeso &lt;- data.frame(\"Nome\" = c(\"Bruno\", \"Dionisio\",\"Eduardo\", \"Ana\", \"Silvia\", \"Elizete\", \"Renata\", \"Arlete\", \"Lucas\"),\n                   \"Peso\" = c(73, 68, 65, 73, 60, 65, 70, 83, 68), stringsAsFactors = F)\n\naltura &lt;- data.frame(\"Nome\" = c(\"Davi\", \"Kevin\",\"Eduardo\",\"Lucas\", \"Antonio\", \"Moises\", \"Dionisio\", \"Ana\", \"Renata\"),\n                     \"Altura\" = c(150, 193, 152, 175, 191, 173, 180, 163, 178), stringsAsFactors = F)\n\nidade &lt;- data.frame(\"Nome\" = c(\"Eloise\", \"Ana\",\"Flavia\",\"Dayse\", \"Eduardo\", \"Silvia\", \"Dionisio\", \"Renata\", \"Bruno\"),\n                    \"Idade\" = c(24, 27, 30, 21, 37, 18, 43, 26, 47), stringsAsFactors = F)\n\nprofissao &lt;- data.frame(\"Nome\" = c(\"Dionisio\", \"Renata\",\"Ana\",\"Flavia\", \"Thais\", \"Daniel\", \"Fernanda\", \"B√°rbara\", \"Henrique\"),\n                        \"Profissao\" = c(\"Programador\", \"Pesquisadora\", \"Advogada\", \"Farmaceutica\", \"Bombeira Civil\", \"Cabelereiro\",\n                                        \"Cozinheira\", \"Estiliesta\", \"Professor\"), stringsAsFactors = F)\n\n\nNo dataframe peso, verifique quantos valores iguais de peso existem.\nNo dataframe altura, verifique quantas e quais pessoas t√™m entre 163cm e 180cm.\nOrdene o dataframe idade de forma descrescente.\nOrdene o dataframe profissao lexicograficamente.\nVerifique quais informa√ß√µes de Dionisio est√£o presentes nos 4 dataframes.\nAltere a profiss√£o da Renata para ‚ÄúCientista‚Äù\nRetorne quantas pessoas possuem todas as informa√ß√µes (Peso, Altura, Idade e Profiss√£o) e armazene em um novo dataframe\n\n\nCom os seguintes dataframes, responda:\n\n\namostra1 &lt;- data.frame(\"genero\" = c(\"Prevotella\", \"Prevotella\", \"Prevotella\", \"Streptococcus\",\"Neisseria\", \"Neisseria\", \n                                    \"Lactobacillus\", \"Bacteroides\", \"Anaerosporomusa\"),\n                       \"especie\" = c(\"Prevotella_copri\", \"Prevotella_denticola\", \"Prevotella_ruminicola\", \"Streptococcus_infantarius\", \n                                     \"Neisseria_gonorrhoeae\", \"Neisseria_meningitidis\", \"Lactobacillus_iners\", \"Bacteroides_xylanisolvens\",\n                                     \"Anaerosporomusa_subterranea\"), stringsAsFactors = F)\n\namostra2 &lt;- data.frame(\"genero\" = c(\"Prevotella\", \"Prevotella\", \"Streptococcus\", \"Streptococcus\", \"Neisseria\", \"Neisseria\", \"Bacteroides\", \n                                    \"Fusobacterium\", \"Pseudoalteromonas\", \"Achromobacter\", \"Aggregatibacte\"),\n                       \"especie\" = c(\"Prevotella_denticola\", \"Prevotella_ruminicola\", \"Streptococcus_infantarius\", \"Streptococcus_equi\", \n                                     \"Neisseria_gonorrhoeae\", \"Neisseria_meningitidis\", \"Bacteroides_xylanisolvens\", \"Fusobacterium_nucleatum\", \n                                     \"Pseudoalteromonas_sp._S558\", \"Achromobacter_sp._KAs_3-5\", \"Aggregatibacter_actinomycetemcomitans\"), stringsAsFactors = F)\n\n\nQuantas esp√©cies da amostra 1 tamb√©m est√£o presentes na amostra 2?\nQuantas esp√©cies da amostra 2 tamb√©m est√£o presentes na amostra 1?\nQuais as posi√ß√µes e os valores dessas esp√©cies?\n\n\nConsidere o dataframe abaixo:\n\n\ndf &lt;- data.frame(col1 = 1:3, col2 = 2:4, col3 = 3:5)\n\nFa√ßa a sele√ß√£o dos elementos do dataframe utilizando duas abordagens diferentes: a abordagem utilizada na indexa√ß√£o de matrizes e a abordagem para indexa√ß√£o de listas.\n\nSelecione a primeira coluna\n3¬∫ elemento da 2¬™ coluna",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Data.frames</span>"
    ]
  },
  {
    "objectID": "content/06_imp_exp.html",
    "href": "content/06_imp_exp.html",
    "title": "6¬† Importa√ß√£o e exporta√ß√£o de dados",
    "section": "",
    "text": "6.1 Importando arquivos\nUma das habilidades b√°sicas necess√°rias para se fazer an√°lises com o R √© importar arquivos e fazer conex√µes com, por exemplo, bancos de dados, e exportar os resultados obtidos em formatos que possam ser lidos pela maioria dos softwares atuais.\nVamos aqui listar algumas fun√ß√µes √∫teis para a importa√ß√£o de arquivos no R.\nA fun√ß√£o source() carrega arquivos de scripts em R e executa os comandos ali contidos.\n# Caminho onde o script est√° salvo\nsource(\"/home/usuario/√Årea de Trabalho/script.R\")\nA fun√ß√£o load() permite o carregamento de arquivos bin√°rios reconhec√≠veis pelo R. A extens√£o .RData √© reconhecida pelo RStudio.\n# Caminho onde o .RData est√° salvo\nload(\"/home/usuario/√Årea de Trabalho/arquivo.RData\")",
    "crumbs": [
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Importa√ß√£o e exporta√ß√£o de dados</span>"
    ]
  },
  {
    "objectID": "content/06_imp_exp.html#importando-arquivos",
    "href": "content/06_imp_exp.html#importando-arquivos",
    "title": "6¬† Importa√ß√£o e exporta√ß√£o de dados",
    "section": "",
    "text": "source()\n\n\n\n\nload()",
    "crumbs": [
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Importa√ß√£o e exporta√ß√£o de dados</span>"
    ]
  },
  {
    "objectID": "content/06_imp_exp.html#importando-dados-tabulares",
    "href": "content/06_imp_exp.html#importando-dados-tabulares",
    "title": "6¬† Importa√ß√£o e exporta√ß√£o de dados",
    "section": "6.2 Importando dados tabulares",
    "text": "6.2 Importando dados tabulares\nA principal fun√ß√£o para importar dados tabulares (tabelas, planilhas, etc.) para o R √© a read.table(). Esta fun√ß√£o possui v√°rios argumentos que podem ser modificados.\nAntes de carregar dados tabulares no R, √© importante saber como o dado est√° organizado (se a separa√ß√£o entre as colunas √© feita por tabula√ß√£o ou por v√≠rgula, por exemplo.)\nAlguns argumentos cuja modifica√ß√£o pode ser √∫til para a importa√ß√£o da tabela:\n\nfile: caminho do diret√≥rio onde o arquivo est√°.\nheader: se FALSE, n√£o considera o cabe√ßalho (se houver) da tabela\nsep: como o dado est√° separado. Se por tabula√ß√£o, sep = \"\\t\", se por v√≠rgula, sep = \",\"\ndec: como os n√∫meros decimais s√£o definidos, se com ‚Äú.‚Äù ou ‚Äú,‚Äù.\ncol.names e row.names: recebem um vetor contendo os nomes das colunas e das linhas, respectivamente.\nquote: atribui um caracter para as aspas. Por padr√£o, atribui ‚Äú‚Äú.\ncomment.char: atribui um caracter para ser usado como coment√°rio.\nskip: valor num√©rico. Pula a importa√ß√£o da quantidade definida de linhas.\nstringsAsFactors: se uma das colunas da tabela for um vetor de caracteres, a op√ß√£o TRUE a considera como um vetor de fatores.\n\nOutras duas fun√ß√µes bastante utilizadas s√£o derivadas da fun√ß√£o read.table(). Estas possuem os mesmos argumentos da fun√ß√£o read.table().\n\nread.delim(): por default, considera o argumento sep = \"\\t\". √ötil para a importa√ß√£o de arquivos cujos elementos s√£o separados por tabula√ß√µes.\nread.csv(): por default, considera o argumento sep = \",\". √ötil para leitura de arquivos .csv.",
    "crumbs": [
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Importa√ß√£o e exporta√ß√£o de dados</span>"
    ]
  },
  {
    "objectID": "content/06_imp_exp.html#importando-arquivos-de-estrutura-desconhecida",
    "href": "content/06_imp_exp.html#importando-arquivos-de-estrutura-desconhecida",
    "title": "6¬† Importa√ß√£o e exporta√ß√£o de dados",
    "section": "6.3 Importando arquivos de estrutura desconhecida",
    "text": "6.3 Importando arquivos de estrutura desconhecida\nQuando lidamos com arquivos dos quais desconhecemos a sua estrutura, podemos dispor de algumas estrat√©gias para facilitar a importa√ß√£o deles para o R.\nPodemos usar a fun√ß√£o readLines(). Esta fun√ß√£o pode abrir uma conex√£o (ver adiante) com um arquivo e ler o conte√∫do de suas linhas. A sa√≠da da fun√ß√£o √© um vetor de caracteres, onde o conte√∫do de cada linha do arquivo original compreender√° uma posi√ß√£o do vetor de sa√≠da. Este procedimento pode revelar como o dado est√° organizado: se √© um dado tabulado, como os elementos de cada coluna est√£o separados, etc.\n\n# Ir√° ler as 10 primeiras linhas do arquivo\nreadLines(\"COG.mappings.v9.0.txt\", 10) \n\nUma outra forma de desvendar a estrutura de um arquivo √© usando a fun√ß√£o scan(). A sa√≠da da fun√ß√£o scan() √© um vetor de caracteres onde cada string do arquivo original compreender√° uma posi√ß√£o do vetor de sa√≠da.\n\nscan(file = 'COG.mappings.v9.0.txt', nlines = 10, what = character())",
    "crumbs": [
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Importa√ß√£o e exporta√ß√£o de dados</span>"
    ]
  },
  {
    "objectID": "content/06_imp_exp.html#conex√µes",
    "href": "content/06_imp_exp.html#conex√µes",
    "title": "6¬† Importa√ß√£o e exporta√ß√£o de dados",
    "section": "6.4 Conex√µes",
    "text": "6.4 Conex√µes\nAs fun√ß√µes citadas anteriormente tem em comum a capacidade de abrirem conex√µes com arquivos e extra√≠rem as informa√ß√µes neles contidas. Al√©m destas, o R possui muitas outras fun√ß√µes para lidar com outros tipos de arquivos e dados externos ao R.\nPode-se tamb√©m estabelecer conex√µes com sites da web:\n\n# url() abre uma conex√£o com arquivo web\ncon &lt;- url(\"http://www.tribunadonorte.com.br/\", \"r\", 10)\nx &lt;- readLines(con)\nx[1:10]\nclose(con)",
    "crumbs": [
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Importa√ß√£o e exporta√ß√£o de dados</span>"
    ]
  },
  {
    "objectID": "content/06_imp_exp.html#salvando-arquivos",
    "href": "content/06_imp_exp.html#salvando-arquivos",
    "title": "6¬† Importa√ß√£o e exporta√ß√£o de dados",
    "section": "6.5 Salvando arquivos",
    "text": "6.5 Salvando arquivos\nOs objetos do R podem ser salvos em arquivos .RData por meio da fun√ß√£o save(). Uma quantidade indeterminada de objetos podem ser salvos no mesmo arquivo .RData.\n\nsave(unido, biometria, esportes, file = \"arquivo.RData\")    \n\nOutra funcionalidade √∫til √© a exporta√ß√£o de objetos tabulares do R para arquivos de texto. Para isso, usamos a fun√ß√£o write.table(). Esta fun√ß√£o possui argumentos semelhantes aos da fun√ß√£o read.table().\nAo usar a fun√ß√£o write.table(), √© importante definir o diret√≥rio no qual o arquivo ser√° salvo e o tipo de separador usado para separar os elementos (argumento sep). Segue a seguinte estrutura:\n\nwrite.table(&lt;objeto&gt;, file = &lt;diret√≥rio de destino&gt;, sep = &lt;separador&gt;)\n\nExemplo:\n\nwrite.table(table1, file = \"arquivo.txt\", sep = \"\\t\", row.names = FALSE, quote = FALSE)\n\nAl√©m disso, tamb√©m como a fun√ß√£o read.table(), write.table() possui outras fun√ß√µes gen√©ricas como write.csv(), por exemplo, a qual possui o argumento sep = \",\" por default.",
    "crumbs": [
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Importa√ß√£o e exporta√ß√£o de dados</span>"
    ]
  },
  {
    "objectID": "content/06_imp_exp.html#desafio",
    "href": "content/06_imp_exp.html#desafio",
    "title": "6¬† Importa√ß√£o e exporta√ß√£o de dados",
    "section": "6.6 Desafio",
    "text": "6.6 Desafio\n\n\n\n\n\n\nPratique sem IA!\n\n\n\nOs desafios a seguir foram criados para ajud√°-lo a desenvolver suas habilidades de forma independente.\nEvite o uso de Intelig√™ncia Artificial e tente resolver os problemas por conta pr√≥pria.\nAprender com a pr√°tica fortalecer√° seu racioc√≠nio e aprofundar√° seu conhecimento! üöÄ\n\n\nEste exerc√≠cio ser√° feito usando o arquivo ‚Äòhappiness.csv‚Äô em content/data/hapiness.csv\n\nNeste exerc√≠cio, vamos importar uma tabela (em arquivo de texto) como um dataframe, fazer algumas opera√ß√µes e em seguida vamos salvar o resultado em um outro arquivo de texto. Antes de importar o arquivo, verifique sua estrutura (como as colunas est√£o separadas, se tem cabe√ßalho, etc.)\n\n\nImporte o arquivo corretamente e o armazene em uma vari√°vel. Obs.: A tabela possui alguns campos num√©ricos onde o separador decimal √© uma v√≠rgula. Importe a tabela de modo que as v√≠rgulas sejam transformadas em pontos (procure ajuda na documenta√ß√£o das fun√ß√µes de importa√ß√£o vistas na aula).\nVerifique se a classe das colunas do dataframe condizem com o tipo de dado armazenado. Por exemplo, a coluna dos pa√≠ses √© um vetor de caracter?\nCrie um subset do dataframe contendo apenas as informa√ß√µes dos pa√≠ses da Am√©rica Latina e Caribe.\nDe acordo com o rank de felicidade, qual pa√≠s da Am√©rica Latina √© o mais feliz?\nCrie um outro subset contendo apenas os pa√≠ses europeus. Calcule a m√©dia de felicidade (baseando-se no score de felicidade) dos pa√≠ses europeus e dos pa√≠ses da Am√©rica Latina. Em qual regi√£o as pessoas s√£o mais felizes?\nSalve o dataframe com as informa√ß√µes da Am√©rica Latina em um arquivo de texto. Ele deve utilizar como separador o ‚Äò;‚Äô.",
    "crumbs": [
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Importa√ß√£o e exporta√ß√£o de dados</span>"
    ]
  },
  {
    "objectID": "content/07_func_escop.html",
    "href": "content/07_func_escop.html",
    "title": "7¬† Definindo fun√ß√µes em R",
    "section": "",
    "text": "7.1 Aspectos gerais das fun√ß√µes em R\nA capacidade de escrever fun√ß√µes otimiza a execu√ß√£o de tarefas repetitivas e torna o usu√°rio um desenvolvedor de conte√∫do.\nUma fun√ß√£o √© um objeto capaz de realizar uma a√ß√£o. Por exemplo, a fun√ß√£o mean() obt√©m a m√©dia de um vetor num√©rico e a fun√ß√£o sqrt() realiza o c√°lculo da raiz quadrada de cada elemento de um vetor num√©rico.\n# O resultado da fun√ß√£o unique() √© usado pela fun√ß√£o length()\nlength(unique(mtcars$cyl))",
    "crumbs": [
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Definindo fun√ß√µes em R</span>"
    ]
  },
  {
    "objectID": "content/07_func_escop.html#aspectos-gerais-das-fun√ß√µes-em-r",
    "href": "content/07_func_escop.html#aspectos-gerais-das-fun√ß√µes-em-r",
    "title": "7¬† Definindo fun√ß√µes em R",
    "section": "",
    "text": "Fun√ß√µes podem ser usadas de forma encadeada. O resultado de uma fun√ß√£o √© usado pela fun√ß√£o mais externa:",
    "crumbs": [
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Definindo fun√ß√µes em R</span>"
    ]
  },
  {
    "objectID": "content/07_func_escop.html#fazendo-a-correspond√™ncia-dos-argumentos-nas-fun√ß√µes",
    "href": "content/07_func_escop.html#fazendo-a-correspond√™ncia-dos-argumentos-nas-fun√ß√µes",
    "title": "7¬† Definindo fun√ß√µes em R",
    "section": "7.2 Fazendo a correspond√™ncia dos argumentos nas fun√ß√µes",
    "text": "7.2 Fazendo a correspond√™ncia dos argumentos nas fun√ß√µes\nA correspond√™ncia dos argumentos de uma fun√ß√£o pode ser feita por meio do nome do argumento ou por meio da posi√ß√£o. Vamos tomar como exemplo a fun√ß√£o rnorm(), que gera um vetor de n elementos que possui valores que obedecem √† distribui√ß√£o normal.\nA fun√ß√£o possui 3 argumentos: n (tamanho do vetor a ser criado), mean (m√©dia da distribui√ß√£o) e sd (desvio padr√£o da distribui√ß√£o), nesta ordem. Se os nome dos argumentos n√£o forem definidos na chamada da fun√ß√£o, ela assumir√° que o primeiro argumento corresponde ao n, o segundo ao mean e o terceiro ao sd.\nVamos criar um vetor de 100 elementos com m√©dia 1 e desvio padr√£o 2.\n\n# Argumentos da fun√ß√£o rnorm\nargs(rnorm)\n\n\n# Fazendo a correspond√™ncia pela posi√ß√£o dos argumentos \nrnorm(100, 1, 2) \n\n\n# Fazendo a correspond√™ncia pelo nome dos argumentos\nrnorm(mean = 1, n = 100, sd = 2)\n\nAmbas as utiliza√ß√µes ir√£o gerar e mesmo resultado.\nObserve, ainda, que as fun√ß√µes podem apresentar argumentos que j√° possuem uma valor pr√©-definido. Na fun√ß√£o rnorm(), os argumentos mean() e sd() possuem valores pr√©-definidos.\n\n# A fun√ß√£o ir√° executar mesmo sem o fornecimento dos outros argumentos.\nrnorm(n = 100) \n\nEntretanto, observe que o argumento n n√£o possui valor pr√©-definido. A aus√™ncia deste argumento impossibilita a execu√ß√£o da fun√ß√£o.\n\nrnorm()",
    "crumbs": [
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Definindo fun√ß√µes em R</span>"
    ]
  },
  {
    "objectID": "content/07_func_escop.html#anatomia-das-fun√ß√µes-em-r",
    "href": "content/07_func_escop.html#anatomia-das-fun√ß√µes-em-r",
    "title": "7¬† Definindo fun√ß√µes em R",
    "section": "7.3 Anatomia das fun√ß√µes em R",
    "text": "7.3 Anatomia das fun√ß√µes em R\nAs fun√ß√µes possuem tr√™s elementos primordiais:\n\nArgumentos: par√¢metros que possibilitam a execu√ß√£o da a√ß√£o. Ao definir a fun√ß√£o, os argumentos podem assumir qualquer nome;\nCorpo: sequ√™ncia de passos para resultar no objetivo da fun√ß√£o;\nAmbiente: quando uma fun√ß√£o √© definida, ela cria um ambiente p≈ïoprio, onde as vari√°veis criadas dentro dela possuem valores pr√≥prios.\n\n\n7.3.1 Definindo fun√ß√µes\nAlgumas propriedades das fun√ß√µes:\n\nA fun√ß√£o function() cria fun√ß√µes definidas pelo pr√≥prio usu√°rio:\n\n\nmy_fun &lt;- function(arg1, arg2) { # Argumentos\n    # Corpo da fun√ß√£o\n}\n\n\nAs fun√ß√µes podem ter uma quantidade indeterminada de argumentos e, inclusive, n√£o apresentar argumentos:\n\n\n# Imprime 12. N√£o possui argumentos.\nf &lt;- function() { \n      12\n}\nf()\n\n\n# Simplesmente imprime \"BU!\" com qualquer argumento.\nf1 &lt;- function(x) { \n      \"BU!\"\n}\nf1()\n\n\nOs argumentos das fun√ß√µes podem apresentar um valor pr√©-definido:\n\n\n# y possui um valor pr√©-definido\nf2 &lt;- function(x, y = 10) { \n      x + y\n}\nf2(2)\nf2(2, 4)\n\n\nQuando definimos um objeto dentro de uma fun√ß√£o e este representa o resultado final da fun√ß√£o, √© necess√°rio retornar seu valor. Para isso, podemos usar a fun√ß√£o return() ou print():\n\n\n# Imprimir o resultado calculado\nf3 &lt;- function(a, b) {\n      res &lt;- c()\n      res[1] &lt;- a^2\n      res[2] &lt;- b + 1\n      print(res) \n}\nf3(2, 4)\n\n\nFunc√µes podem existir dentro de outras fun√ß√µes:\n\n\nmake.power &lt;- function(n) {\n      pow &lt;- function(x) {\n            x^n\n      }\n      pow\n}\n\ncube &lt;- make.power(3)\nsquare &lt;- make.power(2)\n\ncube(3)\nsquare(2)",
    "crumbs": [
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Definindo fun√ß√µes em R</span>"
    ]
  },
  {
    "objectID": "content/07_func_escop.html#ambientes-e-escopo-das-fun√ß√µes",
    "href": "content/07_func_escop.html#ambientes-e-escopo-das-fun√ß√µes",
    "title": "7¬† Definindo fun√ß√µes em R",
    "section": "7.4 Ambientes e escopo das fun√ß√µes",
    "text": "7.4 Ambientes e escopo das fun√ß√µes\nAntes de qualquer coisa, precisamos entender o conceito de vari√°veis livres. As vari√°veis livres s√£o vari√°veis que n√£o s√£o argumentos das fun√ß√µes e nem foram definidas dentro da fun√ß√£o (no escopo da fun√ß√£o). As regras de escopo definem como o R ir√° tentar buscar o valor correspondente a essa vari√°vel livre. Por exemplo:\n\nfun &lt;- function(x, y) {\n    x + y + z\n}\n\nA fun√ß√£o acima possui a vari√°vel z, por√©m ela n√£o foi definida nem como argumento nem no escopo da fun√ß√£o.\nAmbientes correspondem a um conceito abstrato para definir um conjunto de objetos. O ambiente mais usado interativamente pelo usu√°rio √© o Global Environment ou ambiente global, que guarda as objetos e fun√ß√µes que constru√≠mos em uma sess√£o do R. Quando estamos trabalhando no console e queremos obter o valor de um objeto, o R ir√° procurar pelo objeto primeiramente no ambiente global e, se n√£o encontrar, ir√° procurar nos outros ambientes.\nPara se ter uma ideia de quantos e quais os ambientes podem existir, podemos usar a fun√ß√£o search().\n\nsearch()\n\nTendo em vista a ideia de ambiente, consideremos a fun√ß√£o fun() definida anteriormente. O valor da vari√°vel z √© buscado inicialmente no escopo da fun√ß√£o, em seguida no ambiente global e, se n√£o encontrado, √© buscado nos outros ambientes. Se, ap√≥s o t√©rmino da busca, o valor desta vari√°vel n√£o for encontrado, a fun√ß√£o retornar√° um erro:\n\nfun &lt;- function(x, y) {\n    x + y + z\n}\nfun(1, 3)\n\nMais exemplos:\n\nf4 &lt;- function(x, y) {              \n      x^2 + y/z\n}\nf4(2, 4)\n\nNo caso a seguir, o valor da vari√°vel z √© definido no ambiente global e possibilita a execu√ß√£o da fun√ß√£o.\n\nz &lt;- 3\nf4 &lt;- function(x, y) {              \n      x^2 + y/z\n}\nf4(2, 4)",
    "crumbs": [
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Definindo fun√ß√µes em R</span>"
    ]
  },
  {
    "objectID": "content/07_func_escop.html#outros-exemplos",
    "href": "content/07_func_escop.html#outros-exemplos",
    "title": "7¬† Definindo fun√ß√µes em R",
    "section": "7.5 Outros exemplos",
    "text": "7.5 Outros exemplos\nCriando uma fun√ß√£o para adicionar dois n√∫meros:\n\n# x e y s√£o os argumentos da fun√ß√£o definida\n# O que a fun√ß√£o faz: adiciona dois n√∫meros\nadd_num &lt;- function(x, y) {\n    x + y \n}\nadd_num(x = 2, y = 3)\n\nCriando uma fun√ß√£o para calcular a m√©dia de um vetor num√©rico:\n\ncalc_media &lt;- function(vetor) {\n    sum(vetor)/length(vetor)\n}\ncalc_media(c(1, 2, 3, 4))\n\nCriando uma fun√ß√£o que obtenha os valores extremos de um vetor num√©rico:\n\n# Ap√≥s criar uma vari√°vel dentro do escopo da fun√ß√£o, devemos retornar o valor da vari√°vel.\nobter_extremos &lt;- function(vetor) {\n    res &lt;- c(min(vetor, na.rm = TRUE), max(vetor, na.rm = TRUE))\n    print(res)  \n}\nobter_extremos(c(1, 2, 3, 4))",
    "crumbs": [
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Definindo fun√ß√µes em R</span>"
    ]
  },
  {
    "objectID": "content/07_func_escop.html#desafio",
    "href": "content/07_func_escop.html#desafio",
    "title": "7¬† Definindo fun√ß√µes em R",
    "section": "7.6 Desafio",
    "text": "7.6 Desafio\n\n\n\n\n\n\nPratique sem IA!\n\n\n\nOs desafios a seguir foram criados para ajud√°-lo a desenvolver suas habilidades de forma independente.\nEvite o uso de Intelig√™ncia Artificial e tente resolver os problemas por conta pr√≥pria.\nAprender com a pr√°tica fortalecer√° seu racioc√≠nio e aprofundar√° seu conhecimento! üöÄ\n\n\n\nCrie uma fun√ß√£o chamada de ‚Äòf1‚Äô que possua uma outra fun√ß√£o ‚Äòf2‚Äô, esta definida dentro do escopo de ‚Äòf1‚Äô.\n\nA fun√ß√£o interna (‚Äòf2‚Äô) deve fazer duas coisas: - Imprimir no console o ambiente atual com a fun√ß√£o environment() - Imprimir os objetos pertencentes ao seu escopo com a fun√ß√£o ls().\nA fun√ß√£o externa (‚Äòf1‚Äô) deve fazer 3 coisas: - Deve chamar a fun√ß√£o ‚Äòf2‚Äô - Imprimir no console o ambiente atual com a fun√ß√£o environment() - Imprimir os objetos pertencentes ao seu escopo com a fun√ß√£o ls().\nUma vez definidas estas fun√ß√µes, chame a fun√ß√£o externa e responda: os ambientes exibidos s√£o os mesmos? Justifique.\n\nCom base nas regras de escopo do R, justifique o resultado das chamadas das fun√ß√µes abaixo:\n\n\n# Ex.:1\n\nx &lt;- 12\nf1 &lt;- function(y) {\n  x &lt;- 10\n  f2 &lt;- function() {\n    print(x + y)\n  }\n  f2()\n}\n\nf1(4)\n\n# Ex.:2\nz &lt;- 10\nf3 &lt;- function(x, y) {\n  x * y * z\n}\nf3(1, 2)\n\n\nLeia o arquivo network.txt. Ele ser√° usado nas quest√µes 1 a 3. Este conjunto de dados representa uma rede de intera√ß√£o entre prote√≠nas, cujos nomes aparecem nas colunas node1* e node2*. As demais colunas representam scores usados para inferir a for√ßa da intera√ß√£o. A coluna combined_score representa o score combinado destas diferentes fontes e representa a confian√ßa total para cada intera√ß√£o.\n\nComo este arquivo representa uma rede, cada linha do dataframe lido ser√° uma intera√ß√£o entre duas prote√≠nas. Ou seja, os n√≥s da rede est√£o representados nas colunas node1* e node2* e as arestas s√£o as intera√ß√µes entre node1* e node2*.\n\nnetwork &lt;- read.table(\"data/network.txt\", sep = \"\\t\", stringsAsFactors = F, header = T)\n\n\nCrie a fun√ß√£o ‚Äòfiltrar_rede‚Äô para selecionar as intera√ß√µes da rede com score combinado maior que 0.700.\n\n\nInput: dataframe da rede ‚Äònetwork‚Äô.\nOutput: dataframe filtrado com as intera√ß√µes maiores que 0.700 e contendo apenas 3 colunas (node1, node2 e combined_score) Ex:\n\n\nnrow(filtrar_rede(network = network))\n # [1] 948\n\n\nCrie a fun√ß√£o ‚Äòvizinhos‚Äô que calcule a conectividade (quantidade de intera√ß√µes) de um determinado n√≥ da rede e quais s√£o os n√≥s que se conectam com ele.\n\n\nInput: dois argumentos: nome da prote√≠na e o dataframe onde ser√° feita a opera√ß√£o\nOutput: Imprimir no console a conectividade do n√≥ escolhido e quais s√£o seus vizinhos. Ex:\n\n\nvizinhos(symbol = \"NGF\", network = network)\n # O gene  NGF tem  16 vizinhos\n # PIK3R1 CASP6 IKBKB NTRK1 NFKBIA PIK3CB NFKB1 PIK3R2 BAD PIK3CA CASP3 MYD88 CHUK RELA IRAK1 IKBKG\n\n\nAinda sobre o dataset ‚Äònetwork‚Äô, crie uma fun√ß√£o que receba como argumentos o nome de um gene, o dataframe da rede e o score de homologia (coluna homology), e retorne um dataframe que mostre as intera√ß√µes deste gene (colunas ‚Äònode1‚Äô e ‚Äònode2‚Äô) para um score de homologia maior ou igual um determinado valor. Use 0.5 como um valor padr√£o para este limiar de score de homologia.\n\n\nInput: homologia(symbol = ‚ÄúCHUK‚Äù, network = network)\nOutput: &gt; homologia(‚ÄúCHUK‚Äù, network)\n\n\nnode1 node2 homology\n\n24 CHUK IRAK4 0.625\n\n271 CHUK RIPK1 0.525\n\n521 CHUK MAP3K14 0.515\n\n950 AKT2 CHUK 0.656\n\n1158 CHUK AKT3 0.638\n\n1182 CHUK AKT1 0.656\n\n1400 CHUK IKBKB 0.936\n\n1712 CHUK CHEK1 0.679\n\n\nImporte o arquivo contents/data/COGs.RData, dispon√≠vel no sigaa, que foi usado na aula de Importa√ß√£o e Exporta√ß√£o de dados. Use o dataframe contents/data/cog.human.data load(‚ÄúCOGs.RData‚Äù)\n\nFa√ßa uma fun√ß√£o que retorne o n√∫mero de grupos de ort√≥logos (identificadores da coluna cog_id) de uma determinada esp√©cie (coluna spp_id)\n\nInput: dois argumentos - identificador da esp√©cie e o dataframe\nOutput: n√∫mero de COGs do organismo Ex:\n\n\ncontar_cogs(spp = 3702, df = cog.human.data)\n# [1] 4367\n\n\nConsidere o dataset ‚Äòattitude‚Äô. Escreva uma fun√ß√£o que receba como argumento o nome de uma das colunas e retorne um dataframe contendo o valor da m√©dia, mediana, soma das observa√ß√µes, e quantidade de valores faltantes (NA) na coluna:\n\n\nInput: estatisticas(attitude, ‚Äúrating‚Äù)\nOutput: dataframe com os resultados Ex:\n\n\nestatisticas(attitude, \"rating\")\n# media mediana soma n_na\n# 1 64.63333    65.5 1939    0",
    "crumbs": [
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Definindo fun√ß√µes em R</span>"
    ]
  }
]