## Matrizes

Matrizes s√£o vetores bidimensionais que possuem o atributo dimens√£o. Por serem vetores, comportam apenas uma classe de elementos:

```{r}
x<-1:20
x
attributes(x)
m<-matrix(x, 4, 5)
m
attributes(m)
dim(x)<-c(4,5)
x
identical(x, m)
a<-1:5
b<--1:-5
c<-c(3, 6, 4, 9, 1)
# a fun√ß√£o cbind() concatena colunas
m<-cbind(a, b, c)       
m
# a fun√ß√£o rbind() concatena linhas  
m1<-rbind(a, b, c)
m1
# elementos s√£o acessados pelos √≠ndices das duas dimen√ß√µes [linha, coluna]
m[1,3]
# toda a linha
m[1, ]
m[2:3, ]
# atribui√ß√£o
m[1,]<-NA
m
```

::: callout-important
Como s√£o vetores, matrizes comportam somente uma classe de elementos
:::

## Arrays

Um `array` √© um vetor que possui mais de duas dimens√µes:

```{r}
# criando um vetor multidimensional com 4 matrizes de 5 linhas e 10 colunas
ar<-array(1:200, c(5, 10, 4))
ar
# acessando a primeira matriz [linha, coluna, matriz]
ar[,,1]                          
```

## Listas

Listas s√£o tipos especiais de vetores que comportam elementos de diferentes classes:

```{r}
a <- c(1, 3, NA, 7, 9)
b<-matrix(1:200, 20,10)
c<-"Gol do Gremio"
z<-factor(c("alto", "baixo", "medio"))
ls<-list(a, b, c, z)
# cada elemento da lista aparece com [[]]
ls                    
# a fun√ß√£o vector() pode criar listas vazias
ls1<-vector("list", 5)   
ls1
```

### Trabalhando com listas

Listas podem ser acessadas com os operadores `[]`, `[[]]` e `$` (para listas nomeadas):

```{r}
# [] extrai uma lista
ls[1]        
# [[]] extrai o objeto interno
ls[[1]]           
class(ls[1])
class(ls[[1]])
# posi√ß√£o na lista e posi√ß√£o no elemento
ls[[c(1,2)]]      
ls[[2]][2,]
names(ls)<-c("Arilson", "Roger", "Paulo Nunes", "Jardel")
ls$Roger
```

## Desafio

::: callout-tip
## Pratique sem IA!

Os desafios a seguir foram criados para ajud√°-lo a desenvolver suas habilidades de forma independente.\
Evite o uso de Intelig√™ncia Artificial e tente resolver os problemas por conta pr√≥pria.\
Aprender com a pr√°tica fortalecer√° seu racioc√≠nio e aprofundar√° seu conhecimento! üöÄ
:::

1.  **Considere o seguinte vetor:**

```{r}
x <- 1:18
```

a)  Com este vetor, construa uma matriz de 6 linhas e 3 colunas de duas maneiras diferentes.

```{r}
#
```

b)  Adicione o seguinte vetor como um coluna da matriz:

```{r}
v <- letters[1:6]

#
```

c)  O que acontece quando juntamos este vetor √† matriz?

```{r}
#
```

d)  Atribua nomes √†s colunas e √†s linhas:

```{r}
#
```

2.  **Considere a seguinte matriz:**

```{r}
set.seed(1)
m <- matrix(sample(1:100, 20), nrow = 4, ncol = 5)
```

a)  Ordene, de maneira crescente, as linhas da matriz de acordo com os valores da coluna 1.

```{r}
#
```

b)  Exclua as colunas 2 e 4 desta matriz.

```{r}
#
```

c)  Crie um outro objeto para guardar o valor da soma das colunas desta matriz.

```{r}
#
```

3.  **Considere o objeto 'x':**

```{r, results=FALSE}
x <- list(list(list()))

# A fun√ß√£o 'str()' mostra a estrutura de um objeto.
str(x) 

# A fun√ß√£o 'is.recursive()' indica se um objeto √© recursivo
is.recursive(x) 


# Agora conside a seguinte lista:
ls <- list(list(1, 2), 1:10, letters[1:5])
```

a)  Como os objetos da classe das listas diferem dos vetores at√¥micos?

b)  Use a fun√ß√£o 'length' na lista 'ls' acima. O que ela retorna?

```{r}
#
```

c)  Qual a classe de cada elemento desta lista?

```{r}
#
```

d)  Atribua nomes a cada um elementos desta lista.

```{r}
#
```

e)  Qual √© a diferen√ßa entre as sa√≠das dos dois comandos abaixo?

```{r, results=FALSE}
ls[2]
ls[[2]]
```

f)  Obtenha os valores (acesse os elementos de duas formas diferentes):

```{r}
## 1) do 3¬∫ elemento da 2¬™ posi√ß√£o da lista:



## 2) os elementos 1 ao 4 da terceira posi√ß√£o da lista.
```

4.  Considere o vetor:

```{r, results=FALSE}
b <- 1:12
```

Com este vetor, crie dois objetos do tipo 'array', usando duas abordagens diferentes.
