## Data.frames

Um `data.frame` √© um tipo especial de lista, onde todos os elementos devem possuir o mesmo length. Por ser uma lista, cada posi√ß√£o comporta elementos de diferentes classes. Do ponto de vista pr√°tico, o `data.frame` funciona como uma planilha bidimensional formado por vetores de mesmo tamanho, sendo cada vetor uma coluna:

```{r}
number<-c(1, 2, 3, 4, 5)
letter<-c("x", "y", "z", "w", "j")
logical<- c(TRUE, FALSE, FALSE, TRUE, FALSE)
seq<-1:10
dt<-data.frame(number, letter, logical)
class(dt)
# usamos $ para acessar as colunas de um data.frame
dt$letter               
# vetores de caracteres s√£o interpretados como fatores
class(dt$letter)          
# argumento stringsAsFactors = F altera este comportamento padr√£o
dt<-data.frame(number, letter, logical, stringsAsFactors = F) 
dt$letter
class(dt$letter)
# data.frames possuem colnames e rownames como atributos
attributes(dt)                
colnames(dt)
row.names(dt)
# acessamos data.frames da mesma forma que matrizes
dt[5,2]                       
```

### Trabalhando com data.frames

Para acessar data.frames podemos usar os operadores `[]`, `[[]]` e `$`:

```{r}
dt<-data.frame(number=c(1, 2, 3, 4, 5),
               letter = c("x", "y", "z", "w", "j"),
               logical = c(TRUE, FALSE, FALSE, TRUE, FALSE))
# [[ ]] acessa cada coluna por posi√ß√£o
dt[[1]]              
# [ ] acessa as coordenadas [linha, coluna]
dt[,1]               
# $ acessa a coluna pelo nome
dt$number            
# carrega o data.frame mtcars
cars<-mtcars        
# mostra as 6 primeiras linhas
head(cars)          
# mostra as 6 ultimas linhas
tail(cars)
```

```{r}
#Ex.1: faca um data.frame somente com as informacoes dos carros com mais de 100hp



#
```

```{r}
# data.frames possuem colnames e rownames
colnames(dt)
row.names(dt)
# podemos alterar colnames e rownames
row.names(dt)<-c("a", "b", "c", "d", "e")
# alterando apenas a posi√ß√£o 2
colnames(dt)[2]<-"letras"     
# podemos alterar valores espec√≠ficos de um data.frame
dt[3,1]<-"10"
dt$logical<-as.numeric(dt$logical)
dt$letras<-NA
```

√â poss√≠vel verificar as ocorrencias de um data.frame em outro:

```{r}
biometria<-data.frame(nomes=c("Carlos", "Roberto", "Olivio", "Joel"),
                      altura=c(180, 187, 155, 168),
                      peso=c(80, 90, 98, 64))
biometria
esportes<-data.frame(nomes=c("Carlos", "Roberto", "Olivio", "Jomar"),
                     esportes=c("futebol", "remo", "sumo", "maratona"))
esportes
# retorna um vetor l√≥gico
biometria$nomes %in% esportes$nomes
# pode ser usado como √≠ndice
idx<-biometria$nomes %in% esportes$nomes    
x<-biometria[idx,]
x
# ordenando data.frames por uma coluna
biometria<-biometria[with(biometria, order(altura)), ]
biometria
```

```{r}
#Ex.2: ordene o data.frame cars com a coluna "mpg" em ordem crescente



#
```

Unindo data.frames com a fun√ß√£o `merge()`:

::: callout-important
Independe da ordem dos data.framesa busca √© feita pelo nome, n√£o pela ordem o resultado sempre vir√° em ordem alfab√©tica
:::

```{r}
unido<-merge(biometria, esportes, by="nomes")
unido
# as informa√ß√µes n√£o dispon√≠veis s√£o preenchidas por NA
# com todos os presentes no primeiro
unido<-merge(biometria, esportes, by="nomes", all.x=T)
unido
# com todos os presentes no segundo
unido<-merge(biometria, esportes, by="nomes", all.y=T)
unido
# com todos presentes
unido<-merge(biometria, esportes, by="nomes", all=T)
unido
```

```{r}
#load("Data/COGs.RData")
```

```{r}
#Ex.3: verifique se todos os "cog_id" do objeto cogids est?o contidos no objeto cog.human.data



#
```

```{r}
#Ex.4: o arquivo cog.human.data contem 3 tipos de OG: COG, NOG e KOG



#
```

```{r}
#Ex.5: construa tres data frames contendo cada um somente um tipo de OG (i.e. COG, NOG e KOG)



#
```

```{r}
#Ex.6: verifique qual dos tres apresenta maior numero de OG diferentes



#
```

## Desafio

::: callout-tip
## Pratique sem IA!

Os desafios a seguir foram criados para ajud√°-lo a desenvolver suas habilidades de forma independente.\
Evite o uso de Intelig√™ncia Artificial e tente resolver os problemas por conta pr√≥pria.\
Aprender com a pr√°tica fortalecer√° seu racioc√≠nio e aprofundar√° seu conhecimento! üöÄ
:::

1.  **Crie os dataframes abaixo:**

```{r}
peso <- data.frame("Nome" = c("Bruno", "Dionisio","Eduardo", "Ana", "Silvia", "Elizete", "Renata", "Arlete", "Lucas"),
                   "Peso" = c(73, 68, 65, 73, 60, 65, 70, 83, 68), stringsAsFactors = F)

altura <- data.frame("Nome" = c("Davi", "Kevin","Eduardo","Lucas", "Antonio", "Moises", "Dionisio", "Ana", "Renata"),
                     "Altura" = c(150, 193, 152, 175, 191, 173, 180, 163, 178), stringsAsFactors = F)

idade <- data.frame("Nome" = c("Eloise", "Ana","Flavia","Dayse", "Eduardo", "Silvia", "Dionisio", "Renata", "Bruno"),
                    "Idade" = c(24, 27, 30, 21, 37, 18, 43, 26, 47), stringsAsFactors = F)

profissao <- data.frame("Nome" = c("Dionisio", "Renata","Ana","Flavia", "Thais", "Daniel", "Fernanda", "B√°rbara", "Henrique"),
                        "Profissao" = c("Programador", "Pesquisadora", "Advogada", "Farmaceutica", "Bombeira Civil", "Cabelereiro",
                                        "Cozinheira", "Estiliesta", "Professor"), stringsAsFactors = F)
```

a)  No dataframe peso, verifique quantos valores iguais de peso existem.
```{r}
#
```

b)  No dataframe altura, verifique quantas e quais pessoas t√™m entre 163cm e 180cm.
```{r}
#
```

c)  Ordene o dataframe idade de forma descrescente.
```{r}
#
```

d)  Ordene o dataframe profissao lexicograficamente.
```{r}
#
```

e)  Verifique quais informa√ß√µes de Dionisio est√£o presentes nos 4 dataframes.
```{r}
#
```

f)  Altere a profiss√£o da Renata para "Cientista"
```{r}
#
```

g)  Retorne quantas pessoas possuem todas as informa√ß√µes (Peso, Altura, Idade e Profiss√£o) e armazene em um novo dataframe
```{r}
#
```

2.  **Com os seguintes dataframes, responda:**

```{r}
amostra1 <- data.frame("genero" = c("Prevotella", "Prevotella", "Prevotella", "Streptococcus","Neisseria", "Neisseria", 
                                    "Lactobacillus", "Bacteroides", "Anaerosporomusa"),
                       "especie" = c("Prevotella_copri", "Prevotella_denticola", "Prevotella_ruminicola", "Streptococcus_infantarius", 
                                     "Neisseria_gonorrhoeae", "Neisseria_meningitidis", "Lactobacillus_iners", "Bacteroides_xylanisolvens",
                                     "Anaerosporomusa_subterranea"), stringsAsFactors = F)

amostra2 <- data.frame("genero" = c("Prevotella", "Prevotella", "Streptococcus", "Streptococcus", "Neisseria", "Neisseria", "Bacteroides", 
                                    "Fusobacterium", "Pseudoalteromonas", "Achromobacter", "Aggregatibacte"),
                       "especie" = c("Prevotella_denticola", "Prevotella_ruminicola", "Streptococcus_infantarius", "Streptococcus_equi", 
                                     "Neisseria_gonorrhoeae", "Neisseria_meningitidis", "Bacteroides_xylanisolvens", "Fusobacterium_nucleatum", 
                                     "Pseudoalteromonas_sp._S558", "Achromobacter_sp._KAs_3-5", "Aggregatibacter_actinomycetemcomitans"), stringsAsFactors = F)
```

a)  Quantas esp√©cies da amostra 1 tamb√©m est√£o presentes na amostra 2?
```{r}
#
```

b)  Quantas esp√©cies da amostra 2 tamb√©m est√£o presentes na amostra 1?
```{r}
#
```

c)  Quais as posi√ß√µes e os valores dessas esp√©cies?
```{r}
#
```

3.  **Considere o dataframe abaixo:**

```{r}
df <- data.frame(col1 = 1:3, col2 = 2:4, col3 = 3:5)
```

Fa√ßa a sele√ß√£o dos elementos do dataframe utilizando duas abordagens diferentes: a abordagem utilizada na indexa√ß√£o de matrizes e a abordagem para indexa√ß√£o de listas.

a) Selecione a primeira coluna
```{r}
#
```

b) 3¬∫ elemento da 2¬™ coluna
```{r}
#
```

